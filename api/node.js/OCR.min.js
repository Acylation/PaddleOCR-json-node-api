"use strict";const{isMainThread:isMainThread}=require("worker_threads");if(isMainThread){const{Worker:e}=require("worker_threads");class s extends Array{status=!1;shift(){return this.length&&new Promise((e=>this[0](e))).then((()=>(super.shift(),this.status&&this.shift()))),this}push(e){super.push(e)-1||this.status&&this.shift()}}class t extends e{#e;constructor(e,t,r,i=!1){e&&/ /.test(e)&&(e=JSON.stringify(e)),super(__filename,{workerData:{path:e,args:t,options:r,debug:i}});const a=this.#e=new s;super.once("message",(()=>a.shift().status=!0))}get length(){return this.#e.length}postMessage(e){return new Promise((s=>{this.#e.push((t=>{super.once("message",(e=>(s(e),t()))),super.postMessage(e)}))}))}flush(e){return this.postMessage(e)}}module.exports=t}else{const e={path:"PaddleOCR_json.exe",args:["--use_debug=0"],options:{argv0:void 0,stdio:"pipe",detached:!1,shell:!1,windowsVerbatimArguments:void 0,windowsHide:!0},initTag:"OCR init completed."},{parentPort:s,workerData:t}=require("worker_threads"),{spawn:r}=require("child_process"),{resolve:i}=require("path");function a(e){return null===(e=Object.assign({},e)).image_dir?e.image_dir="clipboard":e.image_dir&&(e.image_dir=i(e.image_dir)),e}new Promise((s=>{const{path:i=e.path,args:a=[],options:o,debug:n=!1}=t,d=r(i,a.concat(e.args),Object.assign({},o,e.options));d.stdout.on("data",(function t(r){if(r.toString().match(e.initTag))return d.stdout.off("data",t),s(d)})),n&&(d.stdout.on("data",(e=>{})),d.stderr.on("data",(e=>{})),d.on("close",(e=>{})),d.on("exit",(e=>{})))})).then((t=>{s.postMessage({code:0,message:e.initTag,pid:t.pid}),s.on("message",(e=>t.stdin.write(`${JSON.stringify(a(e))}\n`))),t.stdout.on("data",(e=>{return s.postMessage({code:(t=JSON.parse(e)).code,message:t.code-100?t.data:"",data:t.code-100?null:t.data});var t}))}))}